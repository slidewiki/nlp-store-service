#!/usr/bin/env node

'use strict';

const deckDB = require('../database/deckDatabase');
const nlpDB = require('../database/nlpDatabase');
const nlpService = require('../services/nlp');
const nlpStore = require('../nlpStore/nlpStore');
const async = require('async');
const ProgressBar = require('progress');

function init(){
    let limit = 100;
    let allowErrors = 100;
    
    return deckDB.getTotalCount().then( (totalCount) => {
        let offset = 0;
        let progressBar = new ProgressBar('Progress [:bar] :percent', { total: totalCount });
        return new Promise( (resolve, reject) => {
            async.doWhilst(
                (callback) => {
                    deckDB.getAllIds(offset, limit, {_id:1}).then( (allDecks) => {
                        async.eachSeries(allDecks, (deck, innerCallback) => {
                            progressBar.tick();
                            nlpService.nlpForDeck(deck._id).then( (nlpResult) => {
                                return nlpDB.insert(nlpResult).then( () => {
                                    return nlpStore.indexNLPResult(nlpResult).then( () => {
                                        innerCallback();
                                    });                            
                                });
                            }).catch( (err) => {
                                console.warn('NLP errored for deck ' + deck._id);
                                console.warn(err.message);
                                
                                // if there are too many errors, reject promise
                                if(--allowErrors === 0){
                                    reject('Too many errors, please check configuration and try again');
                                }

                                innerCallback();
                            });
                        }, () => {
                            offset += limit;
                            callback();
                        });

                    }).catch( (err) => {
                        callback(err);
                    });
                },
                () => { return offset <= totalCount; },
                (err) => { 
                    if(err)
                        reject(err);
                    else 
                        resolve(`Initial index of NLP results has been completed`); 
                }
            );
        });
    });
}


init().then( (res) => {
    console.log(res);
    process.exit(0);
}).catch( (err) => {
    console.log(err);
    process.exit(-1);
});